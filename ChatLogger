local coreGui = game:GetService("CoreGui")
local players = game:GetService("Players")
local userInput = game:GetService("UserInputService")

local player = players.LocalPlayer
local mouse = player:GetMouse()

local library = {}

library.__index = library

--# modules

-- utility
local utility = {}
function utility.new(instance_type, properties)
	local instance = Instance.new(instance_type)
	for property, value in pairs(properties) do
		instance[property] = value
	end
	return instance
end
function utility.resizify(frame) --# resizify LMAOOOO
	local resizing, start_size, drag_input, start_position
	
	local function update(input)
		if resizing then
			local new_position = input.Position
			local delta = new_position - start_position

			frame:TweenSize(UDim2.new(
				start_size.X.Scale, start_size.X.Offset + delta.X, start_size.Y.Scale, start_size.Y.Offset - delta.Y
			), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.1, true)
		end
	end
	
	local function get_closest_corner()
		local top_left = frame.AbsolutePosition
		local corners = {
			top_left = top_left;
			top_right = top_left + Vector2.new(frame.AbsoluteSize.X, 0);
			bottom_left = top_left + Vector2.new(0, frame.AbsoluteSize.Y);
			bottom_right = top_left + Vector2.new(frame.AbsoluteSize.X, frame.AbsoluteSize.Y);
		}
		
		local origin = Vector2.new(mouse.X, mouse.Y)
		local corner, distance = nil, 40
		
		for var, val in pairs(corners) do
			local magnitude = (userInput:GetMouseLocation() - val).Magnitude
			print(magnitude)
			if magnitude < distance then
				distance = magnitude
				corner = val
			end
		end
		
		return corner
	end
	
	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			drag_input = input
		end
	end)
	userInput.InputBegan:Connect(function(input, game_event)
		if not game_event then
			if input.UserInputType == Enum.UserInputType.MouseButton1 and get_closest_corner() then
				start_size = frame.Size
				start_position = input.Position
				resizing = true
				frame:SetAttribute("resizing", true)
				local corner = get_closest_corner()
				task.spawn(function()
					while task.wait() do
						if not userInput:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
							resizing = false
							frame:SetAttribute("resizing", nil)
							break
						end
					end
				end)
			end
		end
	end)
	userInput.InputChanged:Connect(function(input)
		if input == drag_input and resizing then
			update(input)
		end
	end)
end
function utility.dragify(instance, to_use)
	local dragging, dragInput, dragStart, startPosition

	local function update(input)
		local delta = input.Position - dragStart
		to_use:TweenPosition(UDim2.new(startPosition.X.Scale, startPosition.X.Offset + delta.X, startPosition.Y.Scale, startPosition.Y.Offset + delta.Y), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.1, true)
	end

	instance.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPosition = to_use.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	instance.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	userInput.InputChanged:Connect(function(input)
		if input == dragInput and dragging and not to_use:GetAttribute("resizing") then
			update(input)
		end
	end)
end

--#

function library:new(info) --# window
	local main = utility.new("ScreenGui", {
		Name = "aercvz696969",
		DisplayOrder = 9999,
		ResetOnSpawn = false,
		ZIndexBehavior = "Global",
		Parent = coreGui
	})
	if syn and syn.request then
		syn.protect_gui(main)
	end
	local border = utility.new("Frame", {
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = info.color,
		BorderColor3 = Color3.fromRGB(12, 12, 12),
		BorderSizePixel = 1,
		Size = UDim2.new(table.unpack(info.size)),
		Parent = main
	})
	local border2 = utility.new("Frame", {
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = Color3.fromRGB(0, 0, 0),
		BorderColor3 = Color3.fromRGB(12, 12, 12),
		BorderSizePixel = 1,
		Size = UDim2.new(1, -4, 1, -4),
		Position = UDim2.new(0.5, 0, 0.5, 0),
		Parent = border
	})
	local indent = utility.new("Frame", {
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = Color3.fromRGB(20, 20, 20),
		BorderColor3 = Color3.fromRGB(56, 56, 56),
		BorderMode = "Inset",
		BorderSizePixel = 1,
		Size = UDim2.new(1, 0, 1, 0),
		Position = UDim2.new(0.5, 0, 0.5, 0),
		Parent = border2
	})
	local holder = utility.new("Frame", {
		AnchorPoint = Vector2.new(0.5, 1),
		BackgroundColor3 = Color3.fromRGB(20, 20, 20),
		BorderColor3 = Color3.fromRGB(56, 56, 56),
		BorderMode = "Inset",
		BorderSizePixel = 1,
		Size = UDim2.new(1, -10, 1, -25),
		Position = UDim2.new(0.5, 0, 1, -5),
		Parent = border2
	})
	local title = utility.new("Frame", {
		AnchorPoint = Vector2.new(0.5, 0),
		BackgroundTransparency = 1,
		Size = UDim2.new(1, 0, 0, 20),
		Position = UDim2.new(0.5, 0, 0, 0),
		Parent = border2
	})
	local border3 = utility.new("Frame", {
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = Color3.fromRGB(24, 24, 24),
		BorderColor3 = Color3.fromRGB(12, 12, 12),
		BorderMode = "Inset",
		BorderSizePixel = 1,
		Size = UDim2.new(1, 0, 1, 0),
		Position = UDim2.new(0.5, 0, 0.5, 0),
		Parent = holder
	})
	local title_text = utility.new("TextLabel", {
		AnchorPoint = Vector2.new(0.5, 0),
		BackgroundTransparency = 1,
		Size = UDim2.new(1, -10, 1, -10),
		Position = UDim2.new(0.5, 0, 0.25, 0),
		Font = info.font,
		Text = info.name,
		TextColor3 = Color3.fromRGB(255,255,255),
		TextXAlignment = "Left",
		TextSize = info.textsize,
		TextStrokeTransparency = 0,
		Parent = title
	})
	local logger_contents = utility.new("ScrollingFrame", {
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundTransparency = 1,
		Size = UDim2.new(1, -10, 1, -10),
		Position = UDim2.new(0.5, 0, 0.5, 0),
		BottomImage = "",
		MidImage = "",
		TopImage = "",
		ScrollBarThickness = 0,
		Parent = holder
	})
	utility.new("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Parent = logger_contents
	})
	utility.dragify(title, border)
	utility.resizify(border)
	local window = {
		["screen"] = main,
		["border"] = border,
		["logger_holder"] = logger_contents,
		["labels"] = {},
		["textsize"] = info.textsize,
		["font"] = info.font,
		["theme"] = {
			["accent"] = info.color
		},
		["themeitems"] = {
			["accent"] = {
				["BackgroundColor3"] = {},
				["BorderColor3"] = {},
				["TextColor3"] = {}
			}
		}
	}
	table.insert(window["themeitems"]["accent"]["BackgroundColor3"], border)
	window["labels"][#window["labels"] + 1] = title_text
	setmetatable(window, library)
	return window
end
function library:insert_label(text, color)
	local window = self
	if window["logger_holder"] then
		local label = utility.new("TextLabel", {
			Text = text,
			BackgroundTransparency = 1,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			TextSize = window["textsize"],
			TextWrapped = true,
			TextXAlignment = Enum.TextXAlignment.Left,
			Size = UDim2.new(0, 500, 0, 20),
			Font = window["font"],
			Parent = window["logger_holder"]
		})
		window["labels"][#window["labels"] + 1] = label
	end
end
function library:update(toggled)
	local totalSize = UDim2.new(0, 0, 0, 0)
	local window = self
	window["screen"].Enabled = toggled
	if window["logger_holder"] then
		for _, text_label in pairs(window["logger_holder"]:GetChildren()) do
			if text_label:IsA("TextLabel") then
				totalSize = totalSize + UDim2.new(0, 0, 0, text_label.Size.Y.Offset)
				if totalSize.Y.Offset >= window["logger_holder"].CanvasSize.Y.Offset then
					window["logger_holder"].CanvasSize = UDim2.new(totalSize.X.Scale, totalSize.X.Offset, totalSize.Y.Scale, totalSize.Y.Offset + 100)
					window["logger_holder"].CanvasPosition = window["logger_holder"].CanvasPosition + Vector2.new(0, totalSize.Y.Offset)
				end
			end
		end
	end
end
function library:settheme(theme, color)
	local window = self
	if window.theme[theme] then
		window.theme[theme] = color
	end
	if window.themeitems[theme] then
		for i, v in pairs(window.themeitems[theme]) do
			for z, x in pairs(v) do
				x[i] = color
			end
		end
	end
end
function library:set_cfg()
	local window = self

	window["border"].Size = UDim2.new(table.unpack(CONFIG.CHAT_LOGGER_SIZE))
	window["border"].Position = UDim2.new(table.unpack(CONFIG.CHAT_LOGGER_POSITION))
end
return library
